// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Skybox Support",
            "url": "None",
            "email": "None"
        },
        "license": {
            "name": "GNU General Public License v3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "This endpoint authenticates the user by checking the email and password. If the credentials are valid, it generates an access token and a refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticates the user",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Logs out the user and invalidates the refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logs out the user",
                "parameters": [
                    {
                        "description": "Logout Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to log out the user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "This endpoint validates the refresh token and generates a new access token, allowing the user to continue their session without re-authenticating.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Validate and refresh the access token via refresh token",
                "parameters": [
                    {
                        "description": "Refresh Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to refresh the access token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "This endpoint registers a new user by creating a new user record in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Registers a new user",
                "parameters": [
                    {
                        "description": "Register Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already exists with the email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to register the user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/files/{fileId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get file metadata by file ID. The file ID is a unique identifier for the file in the database. The metadata includes information such as the file name, size, type, and creation date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Get file metadata",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File metadata retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.File"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a file by its ID. The file is marked as deleted in the database, but not removed from the storage service. This allows for potential recovery in the future.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Delete a file",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/files/{fileId}/move": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Move a file to a new folder by providing the new parent folder ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Move a file to a new folder",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Move file request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MoveFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File moved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/files/{fileId}/rename": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Rename a file by providing the new name. Upon renaming, the file's metadata is updated. And when downloading, the file is fetched from the storage service using the new name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Rename a file",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename file request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File renamed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Rename a file by providing the new name. Upon renaming, the file's metadata is updated. And when downloading, the file is fetched from the storage service using the new name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Rename a file",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename file request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File renamed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve detailed metadata for a folder by its ID. Includes information such as folder ID, owner ID, name, parent folder ID, and creation timestamps.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Get metadata of a specific folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Folder"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mark a folder as deleted (move it to the recycle bin). Subfolders and files are not immediately deleted but will also be marked for deletion. After a retention period, they may be permanently deleted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Soft-delete a folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder deleted successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/contents": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of all files and subfolders contained within a specified folder. Useful for browsing the contents of a directory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "List all files and folders inside a folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GetFolderContentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/create": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new folder inside a given parent folder. If no parent folder ID is provided, the folder will be created at the root level.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Create a new folder inside a specified parent folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateFolderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/move": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Move a folder from its current location to another destination folder. The folder's contents will be moved along with it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Move a folder to a new parent folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Move Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MoveFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder moved successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/public-status": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the public status of a folder by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Get folder public status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder public status retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the public status of a folder by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Update folder public status of a folder (public for everyone to view or restricted to only added members)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Folder Public Status Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateFolderPublicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder public status updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/public-status/all": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the public status of a folder and all its subfolders by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Update folder and subfolders public status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Folder Public Status Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateFolderPublicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder and subfolders public status updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/rename": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Rename an existing folder by providing its ID and the new name. Only the folder name will be updated; the folder's contents are unaffected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Rename a specific folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder renamed successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Rename an existing folder by providing its ID and the new name. Only the folder name will be updated; the folder's contents are unaffected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Rename a specific folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder renamed successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/share": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Shares a folder with a user by providing the user ID and permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Share a folder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Share Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ShareFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder shared successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Only the owner can share this folder",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes sharing permissions for a folder by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Remove folder share",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Remove Folder Share Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RemoveFolderShareRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder share removed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Only the owner can remove share permissions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/share/all": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Shares a folder and all its subfolders with a user by providing the user ID and permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Share folder and subfolders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Share Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ShareFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder and subfolders shared successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Only the owner can share this folder",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Revokes sharing permissions for a folder and all its subfolders by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Revoke folder and subfolders share",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Revoke Folder Share Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RevokeFolderShareRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder and subfolders share revoked successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Only the owner can revoke share permissions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/shared-users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the list of users a folder is shared with by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Get folder shared users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of shared users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FolderSharedUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/folders/{folderId}/upload": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a file document in the database for file upload operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Upload metadata and create a file metadata in the database before upload operation.",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Upload File Metadata Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UploadFileMetadataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UploadFileMetadataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/hello": {
            "get": {
                "description": "Returns a hello world message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns a hello world message",
                "responses": {
                    "200": {
                        "description": "Hello World",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upload/{sessionToken}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve an upload session's metadata using its session token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UploadSession"
                ],
                "summary": "Get an upload session by session token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session Token",
                        "name": "sessionToken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UploadSession"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing or invalid session token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/user/info": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Returns the user information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/files/{fileId}/download": {
            "get": {
                "description": "Download a file by its ID. The file is streamed in chunks to the client. The client can request a specific range of bytes using the Range header. If no Range header is provided, the entire file is downloaded.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Download a file",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File downloaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/hello": {
            "get": {
                "description": "Returns a hello world message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns a hello world message",
                "responses": {
                    "200": {
                        "description": "Hello World",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/chunked/{fileId}": {
            "post": {
                "description": "Upload a file in chunks (auto chunking) to the server. This endpoint automatically splits the file into chunks and uploads them concurrently. It is useful for larger files or when chunking is needed, i.e., larger than 50MB.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload"
                ],
                "summary": "Upload a file in chunks (auto chunking)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"fileId\"",
                        "example": "\"fileId\"",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5242880,
                        "example": 5242880,
                        "description": "Chunk Size",
                        "name": "chunkSize",
                        "in": "query"
                    },
                    {
                        "type": "file",
                        "description": "File",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid file ID or file size exceeds the maximum limit",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to save file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/file/{fileID}": {
            "get": {
                "description": "Retrieve an upload session's metadata using its associated file ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UploadSession"
                ],
                "summary": "Get an upload session by file ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UploadSession"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing or invalid file ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Add a chunk to an existing upload session using its associated file ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UploadSession"
                ],
                "summary": "Add a chunk to an upload session using file ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chunk data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddChunkViaFileIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chunk added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid request body or file ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/session/{sessionToken}/chunk": {
            "post": {
                "description": "Upload a chunk to a resumable session using the session token and Content-Range header to identify the chunk and its size. The chunk is saved to the server or any other storage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload"
                ],
                "summary": "Upload a chunk to a resumable session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session Token",
                        "name": "sessionToken",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content-Range header specifying the chunk range",
                        "name": "Content-Range",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Chunk data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chunk uploaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid session ID or Content-Range header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to save chunk",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/session/{sessionToken}/status": {
            "get": {
                "description": "Retrieve the status of an upload session using its session token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload"
                ],
                "summary": "Get the status of an upload session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session Token",
                        "name": "sessionToken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UploadSession"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing session ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden: User ID does not match the session owner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to fetch session object",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/whole/{fileId}": {
            "post": {
                "description": "Upload a whole file (without chunking) to the server. This is a simple upload endpoint that does not require chunking. It is useful for smaller files or when chunking is not needed, i.e., lower than 50MB.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload"
                ],
                "summary": "Upload a whole file (without chunking)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"fileId\"",
                        "example": "\"fileId\"",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid file ID or Failed to get file from form or file size exceeds the maximum limit",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to save file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/{sessionToken}": {
            "put": {
                "description": "Add a chunk to an existing upload session using its session token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UploadSession"
                ],
                "summary": "Add a chunk to an upload session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session Token",
                        "name": "sessionToken",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chunk data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddChunkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chunk added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid request body or session token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AddChunkRequest": {
            "type": "object",
            "properties": {
                "chunk_hash": {
                    "description": "The hash of the chunk being uploaded",
                    "type": "string"
                },
                "chunk_number": {
                    "description": "The number of the chunk being uploaded",
                    "type": "integer"
                },
                "chunk_size": {
                    "description": "The size of the chunk being uploaded",
                    "type": "integer"
                }
            }
        },
        "models.AddChunkViaFileIDRequest": {
            "type": "object",
            "properties": {
                "chunk_hash": {
                    "description": "The hash of the chunk being uploaded",
                    "type": "string"
                },
                "chunk_number": {
                    "description": "The number of the chunk being uploaded",
                    "type": "integer"
                },
                "chunk_size": {
                    "description": "The size of the chunk being uploaded",
                    "type": "integer"
                }
            }
        },
        "models.CreateFolderRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.CreateFolderResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                }
            }
        },
        "models.File": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "Nullable field for soft delete",
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "file_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "mime_type": {
                    "type": "string"
                },
                "owner_email": {
                    "type": "string"
                },
                "owner_id": {
                    "description": "The owner of the file",
                    "type": "string"
                },
                "owner_username": {
                    "type": "string"
                },
                "parent_folder_id": {
                    "description": "The parent folder ID, if any",
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the file (e.g., \"uploaded\", \"processing\", \"failed\")",
                    "type": "string"
                },
                "total_chunks": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.FileResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_email": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "owner_user_name": {
                    "type": "string"
                },
                "parent_folder_id": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Folder": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "Nullable field for soft delete",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "is_public": {
                    "type": "boolean"
                },
                "is_root": {
                    "description": "Indicates if this is a root folder",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner_email": {
                    "type": "string"
                },
                "owner_id": {
                    "description": "The owner of the folder",
                    "type": "string"
                },
                "owner_username": {
                    "type": "string"
                },
                "parent_folder_id": {
                    "description": "The parent folder ID, if any",
                    "type": "string"
                },
                "stats": {
                    "$ref": "#/definitions/models.FolderStat"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.FolderResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_email": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "owner_user_name": {
                    "type": "string"
                },
                "parent_folder_id": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "#/definitions/models.FolderStat"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.FolderSharedUser": {
            "type": "object",
            "properties": {
                "folder_id": {
                    "type": "string"
                },
                "permission": {
                    "description": "\"view\" or \"edit\"",
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.FolderStat": {
            "type": "object",
            "properties": {
                "total_files": {
                    "type": "integer"
                },
                "total_folders": {
                    "type": "integer"
                },
                "total_size": {
                    "type": "integer"
                }
            }
        },
        "models.GetFolderContentsResponse": {
            "type": "object",
            "properties": {
                "file_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FileResponse"
                    }
                },
                "folder_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FolderResponse"
                    }
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Access token",
                    "type": "string"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "id": {
                    "description": "User ID",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Refresh token",
                    "type": "string"
                },
                "root_folder_id": {
                    "description": "Root folder ID",
                    "type": "string"
                },
                "username": {
                    "description": "Username",
                    "type": "string"
                }
            }
        },
        "models.LogoutRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.MoveFileRequest": {
            "type": "object",
            "required": [
                "new_parent_id"
            ],
            "properties": {
                "new_parent_id": {
                    "type": "string"
                }
            }
        },
        "models.MoveFolderRequest": {
            "type": "object",
            "required": [
                "new_parent_id"
            ],
            "properties": {
                "new_parent_id": {
                    "type": "string"
                }
            }
        },
        "models.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.RefreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Access token",
                    "type": "string"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "id": {
                    "description": "User ID",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Refresh token",
                    "type": "string"
                },
                "username": {
                    "description": "Username",
                    "type": "string"
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "models.RemoveFolderShareRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.RenameFileRequest": {
            "type": "object",
            "required": [
                "new_name"
            ],
            "properties": {
                "new_name": {
                    "type": "string"
                }
            }
        },
        "models.RenameFolderRequest": {
            "type": "object",
            "required": [
                "new_name"
            ],
            "properties": {
                "new_name": {
                    "type": "string"
                }
            }
        },
        "models.RevokeFolderShareRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.ShareFolderRequest": {
            "type": "object",
            "required": [
                "permission",
                "user_id"
            ],
            "properties": {
                "permission": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.UpdateFolderPublicRequest": {
            "type": "object",
            "required": [
                "is_public"
            ],
            "properties": {
                "is_public": {
                    "type": "boolean"
                }
            }
        },
        "models.UploadFileMetadataRequest": {
            "type": "object",
            "required": [
                "file_name",
                "file_size"
            ],
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "mime_type": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "models.UploadFileMetadataResponse": {
            "type": "object",
            "required": [
                "upload_url"
            ],
            "properties": {
                "file": {
                    "$ref": "#/definitions/models.FileResponse"
                },
                "upload_url": {
                    "type": "string"
                }
            }
        },
        "models.UploadSession": {
            "type": "object",
            "properties": {
                "actual_size": {
                    "description": "Actual size of the uploaded file",
                    "type": "integer"
                },
                "chunk_list": {
                    "description": "List of chunks that have been uploaded",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "file_id": {
                    "description": "Reference to the file",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "session_token": {
                    "description": "Unique session token for the upload session",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the upload session (e.g., \"pending\", \"completed\", \"failed\")",
                    "type": "string"
                },
                "total_size": {
                    "description": "Total size of the file to be uploaded",
                    "type": "integer"
                },
                "user_id": {
                    "description": "Reference to the user",
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_login_at": {
                    "type": "string"
                },
                "last_password_change_at": {
                    "type": "string"
                },
                "root_folder_id": {
                    "description": "The root folder ID for the user",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserEmailListRequest": {
            "type": "object",
            "required": [
                "emails"
            ],
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UserIDListRequest": {
            "type": "object",
            "required": [
                "ids"
            ],
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UserListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserResponse"
                    }
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Use \"Bearer {your_token}\" to authenticate requests.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI Documentation",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Skybox API and Block Server",
	Description:      "Skybox is a cloud-based file storage provider similar to Google Drive and Dropbox. It allows users to securely store, manage, and retrieve their files.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
