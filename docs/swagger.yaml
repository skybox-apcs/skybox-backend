basePath: /
definitions:
  controllers.SearchResult:
    properties:
      id:
        type: string
      is_file:
        type: boolean
      name:
        type: string
    type: object
  models.AddChunkRequest:
    properties:
      chunk_hash:
        description: The hash of the chunk being uploaded
        type: string
      chunk_number:
        description: The number of the chunk being uploaded
        type: integer
      chunk_size:
        description: The size of the chunk being uploaded
        type: integer
    type: object
  models.AddChunkViaFileIDRequest:
    properties:
      chunk_hash:
        description: The hash of the chunk being uploaded
        type: string
      chunk_number:
        description: The number of the chunk being uploaded
        type: integer
      chunk_size:
        description: The size of the chunk being uploaded
        type: integer
    type: object
  models.CreateFolderRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.CreateFolderResponse:
    properties:
      id:
        type: string
      name:
        type: string
      owner_id:
        type: string
      parent_id:
        type: string
    type: object
  models.File:
    properties:
      created_at:
        type: string
      deleted_at:
        description: Nullable field for soft delete
        type: string
      extension:
        type: string
      file_name:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      mime_type:
        type: string
      owner_email:
        type: string
      owner_id:
        description: The owner of the file
        type: string
      owner_username:
        type: string
      parent_folder_id:
        description: The parent folder ID, if any
        type: string
      size:
        type: integer
      status:
        description: Status of the file (e.g., "uploaded", "processing", "failed")
        type: string
      total_chunks:
        type: integer
      updated_at:
        type: string
    type: object
  models.FileResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      mime_type:
        type: string
      name:
        type: string
      owner_email:
        type: string
      owner_id:
        type: string
      owner_user_name:
        type: string
      parent_folder_id:
        type: string
      size:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.Folder:
    properties:
      created_at:
        type: string
      deleted_at:
        description: Nullable field for soft delete
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_public:
        type: boolean
      is_root:
        description: Indicates if this is a root folder
        type: boolean
      name:
        type: string
      owner_email:
        type: string
      owner_id:
        description: The owner of the folder
        type: string
      owner_username:
        type: string
      parent_folder_id:
        description: The parent folder ID, if any
        type: string
      stats:
        $ref: '#/definitions/models.FolderStat'
      updated_at:
        type: string
    type: object
  models.FolderResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      owner_email:
        type: string
      owner_id:
        type: string
      owner_user_name:
        type: string
      parent_folder_id:
        type: string
      stats:
        $ref: '#/definitions/models.FolderStat'
      updated_at:
        type: string
    type: object
  models.FolderSharedUser:
    properties:
      folder_id:
        type: string
      permission:
        description: '"view" or "edit"'
        type: boolean
      user_id:
        type: string
    type: object
  models.FolderStat:
    properties:
      total_files:
        type: integer
      total_folders:
        type: integer
      total_size:
        type: integer
    type: object
  models.GetFolderContentsResponse:
    properties:
      file_list:
        items:
          $ref: '#/definitions/models.FileResponse'
        type: array
      folder_list:
        items:
          $ref: '#/definitions/models.FolderResponse'
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      access_token:
        description: Access token
        type: string
      email:
        description: User email
        type: string
      id:
        description: User ID
        type: string
      refresh_token:
        description: Refresh token
        type: string
      root_folder_id:
        description: Root folder ID
        type: string
      username:
        description: Username
        type: string
    type: object
  models.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.MoveFileRequest:
    properties:
      new_parent_id:
        type: string
    required:
    - new_parent_id
    type: object
  models.MoveFolderRequest:
    properties:
      new_parent_id:
        type: string
    required:
    - new_parent_id
    type: object
  models.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RefreshResponse:
    properties:
      access_token:
        description: Access token
        type: string
      email:
        description: User email
        type: string
      id:
        description: User ID
        type: string
      refresh_token:
        description: Refresh token
        type: string
      username:
        description: Username
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.RemoveFolderShareRequest:
    properties:
      user_id:
        type: string
    required:
    - user_id
    type: object
  models.RenameFileRequest:
    properties:
      new_name:
        type: string
    required:
    - new_name
    type: object
  models.RenameFolderRequest:
    properties:
      new_name:
        type: string
    required:
    - new_name
    type: object
  models.RevokeFolderShareRequest:
    properties:
      user_id:
        type: string
    required:
    - user_id
    type: object
  models.ShareFolderRequest:
    properties:
      permission:
        type: boolean
      user_id:
        type: string
    required:
    - user_id
    type: object
  models.UpdateFolderPublicRequest:
    properties:
      is_public:
        type: boolean
    type: object
  models.UploadFileMetadataRequest:
    properties:
      file_name:
        type: string
      file_size:
        type: integer
      mime_type:
        description: optional
        type: string
    required:
    - file_name
    - file_size
    type: object
  models.UploadFileMetadataResponse:
    properties:
      file:
        $ref: '#/definitions/models.FileResponse'
      upload_url:
        type: string
    required:
    - upload_url
    type: object
  models.UploadSession:
    properties:
      actual_size:
        description: Actual size of the uploaded file
        type: integer
      chunk_list:
        description: List of chunks that have been uploaded
        items:
          type: integer
        type: array
      file_id:
        description: Reference to the file
        type: string
      id:
        type: string
      session_token:
        description: Unique session token for the upload session
        type: string
      status:
        description: Status of the upload session (e.g., "pending", "completed", "failed")
        type: string
      total_size:
        description: Total size of the file to be uploaded
        type: integer
      user_id:
        description: Reference to the user
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      last_password_change_at:
        type: string
      root_folder_id:
        description: The root folder ID for the user
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserEmailListRequest:
    properties:
      emails:
        items:
          type: string
        type: array
    required:
    - emails
    type: object
  models.UserIDListRequest:
    properties:
      ids:
        items:
          type: string
        type: array
    required:
    - ids
    type: object
  models.UserListResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
externalDocs:
  description: OpenAPI Documentation
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: None
    name: Skybox Support
    url: None
  description: Skybox is a cloud-based file storage provider similar to Google Drive
    and Dropbox. It allows users to securely store, manage, and retrieve their files.
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  termsOfService: http://swagger.io/terms/
  title: Skybox API and Block Server
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint authenticates the user by checking the email and
        password. If the credentials are valid, it generates an access token and a
        refresh token.
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User authenticated successfully
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Authenticates the user
      tags:
      - Authentication
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user and invalidates the refresh token
      parameters:
      - description: Logout Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged out successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to log out the user
          schema:
            type: string
      security:
      - Bearer: []
      summary: Logs out the user
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: This endpoint validates the refresh token and generates a new access
        token, allowing the user to continue their session without re-authenticating.
      parameters:
      - description: Refresh Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            $ref: '#/definitions/models.RefreshResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid refresh token
          schema:
            type: string
        "500":
          description: Failed to refresh the access token
          schema:
            type: string
      summary: Validate and refresh the access token via refresh token
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new user by creating a new user record
        in the database.
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "409":
          description: User already exists with the email
          schema:
            type: string
        "500":
          description: Failed to register the user
          schema:
            type: string
      summary: Registers a new user
      tags:
      - Authentication
  /api/v1/files/{fileId}:
    delete:
      consumes:
      - application/json
      description: Delete a file by its ID. The file is marked as deleted in the database,
        but not removed from the storage service. This allows for potential recovery
        in the future.
      parameters:
      - description: File ID
        example: 1234567890abcdef12345678
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: File not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a file
      tags:
      - Files
    get:
      consumes:
      - application/json
      description: Get file metadata by file ID. The file ID is a unique identifier
        for the file in the database. The metadata includes information such as the
        file name, size, type, and creation date.
      parameters:
      - description: File ID
        example: 1234567890abcdef12345678
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File metadata retrieved successfully
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: File not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get file metadata
      tags:
      - Files
  /api/v1/files/{fileId}/move:
    put:
      consumes:
      - application/json
      description: Move a file to a new folder by providing the new parent folder
        ID.
      parameters:
      - description: File ID
        example: 1234567890abcdef12345678
        in: path
        name: fileId
        required: true
        type: string
      - description: Move file request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MoveFileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: File moved successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: File not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Move a file to a new folder
      tags:
      - Files
  /api/v1/files/{fileId}/rename:
    patch:
      consumes:
      - application/json
      description: Rename a file by providing the new name. Upon renaming, the file's
        metadata is updated. And when downloading, the file is fetched from the storage
        service using the new name.
      parameters:
      - description: File ID
        example: 1234567890abcdef12345678
        in: path
        name: fileId
        required: true
        type: string
      - description: Rename file request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RenameFileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: File renamed successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: File not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Rename a file
      tags:
      - Files
    put:
      consumes:
      - application/json
      description: Rename a file by providing the new name. Upon renaming, the file's
        metadata is updated. And when downloading, the file is fetched from the storage
        service using the new name.
      parameters:
      - description: File ID
        example: 1234567890abcdef12345678
        in: path
        name: fileId
        required: true
        type: string
      - description: Rename file request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RenameFileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: File renamed successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: File not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Rename a file
      tags:
      - Files
  /api/v1/folders/{folderId}:
    delete:
      consumes:
      - application/json
      description: Mark a folder as deleted (move it to the recycle bin). Subfolders
        and files are not immediately deleted but will also be marked for deletion.
        After a retention period, they may be permanently deleted.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder deleted successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: Soft-delete a folder
      tags:
      - Folders
    get:
      consumes:
      - application/json
      description: Retrieve detailed metadata for a folder by its ID. Includes information
        such as folder ID, owner ID, name, parent folder ID, and creation timestamps.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Folder'
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get metadata of a specific folder
      tags:
      - Folders
  /api/v1/folders/{folderId}/contents:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all files and subfolders contained within a
        specified folder. Useful for browsing the contents of a directory.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetFolderContentsResponse'
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: List all files and folders inside a folder
      tags:
      - Folders
  /api/v1/folders/{folderId}/create:
    post:
      consumes:
      - application/json
      description: Create a new folder inside a given parent folder. If no parent
        folder ID is provided, the folder will be created at the root level.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Create Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateFolderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateFolderResponse'
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new folder inside a specified parent folder
      tags:
      - Folders
  /api/v1/folders/{folderId}/move:
    put:
      consumes:
      - application/json
      description: Move a folder from its current location to another destination
        folder. The folder's contents will be moved along with it.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Move Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MoveFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder moved successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: Move a folder to a new parent folder
      tags:
      - Folders
  /api/v1/folders/{folderId}/public-status:
    get:
      consumes:
      - application/json
      description: Retrieves the public status of a folder by its ID.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder public status retrieved successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Folder not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get folder public status
      tags:
      - Folders
    put:
      consumes:
      - application/json
      description: Updates the public status of a folder by its ID.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Update Folder Public Status Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateFolderPublicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder public status updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Folder not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update folder public status of a folder (public for everyone to view
        or restricted to only added members)
      tags:
      - Folders
  /api/v1/folders/{folderId}/public-status/all:
    put:
      consumes:
      - application/json
      description: Updates the public status of a folder and all its subfolders by
        its ID.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Update Folder Public Status Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateFolderPublicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder and subfolders public status updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Folder not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update folder and subfolders public status
      tags:
      - Folders
  /api/v1/folders/{folderId}/rename:
    patch:
      consumes:
      - application/json
      description: Rename an existing folder by providing its ID and the new name.
        Only the folder name will be updated; the folder's contents are unaffected.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Rename Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RenameFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder renamed successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: Rename a specific folder
      tags:
      - Folders
    put:
      consumes:
      - application/json
      description: Rename an existing folder by providing its ID and the new name.
        Only the folder name will be updated; the folder's contents are unaffected.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Rename Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RenameFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder renamed successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: Rename a specific folder
      tags:
      - Folders
  /api/v1/folders/{folderId}/share:
    delete:
      consumes:
      - application/json
      description: Removes sharing permissions for a folder by its ID.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Remove Folder Share Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RemoveFolderShareRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder share removed successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "403":
          description: Only the owner can remove share permissions
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Remove folder share
      tags:
      - Folders
    post:
      consumes:
      - application/json
      description: Shares a folder with a user by providing the user ID and permission.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Share Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShareFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder shared successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "403":
          description: Only the owner can share this folder
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Share a folder
      tags:
      - Folders
  /api/v1/folders/{folderId}/share/all:
    delete:
      consumes:
      - application/json
      description: Revokes sharing permissions for a folder and all its subfolders
        by its ID.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Revoke Folder Share Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RevokeFolderShareRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder and subfolders share revoked successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "403":
          description: Only the owner can revoke share permissions
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Revoke folder and subfolders share
      tags:
      - Folders
    post:
      consumes:
      - application/json
      description: Shares a folder and all its subfolders with a user by providing
        the user ID and permission.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Share Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShareFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder and subfolders shared successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "403":
          description: Only the owner can share this folder
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Share folder and subfolders
      tags:
      - Folders
  /api/v1/folders/{folderId}/shared-users:
    get:
      consumes:
      - application/json
      description: Retrieves the list of users a folder is shared with by its ID.
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of shared users
          schema:
            items:
              $ref: '#/definitions/models.FolderSharedUser'
            type: array
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Folder not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get folder shared users
      tags:
      - Folders
  /api/v1/folders/{folderId}/upload:
    post:
      consumes:
      - application/json
      description: Create a file document in the database for file upload operation.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Upload File Metadata Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UploadFileMetadataRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UploadFileMetadataResponse'
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - Bearer: []
      summary: Upload metadata and create a file metadata in the database before upload
        operation.
      tags:
      - Files
  /api/v1/hello:
    get:
      consumes:
      - application/json
      description: Returns a hello world message
      produces:
      - application/json
      responses:
        "200":
          description: Hello World
          schema:
            type: string
      summary: Returns a hello world message
      tags:
      - Misc
  /api/v1/upload/{sessionToken}:
    get:
      consumes:
      - application/json
      description: Retrieve an upload session's metadata using its session token.
      parameters:
      - description: Session Token
        in: path
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session retrieved successfully
          schema:
            $ref: '#/definitions/models.UploadSession'
        "400":
          description: 'Bad Request: Missing or invalid session token'
          schema:
            type: string
        "404":
          description: 'Not Found: Session not found'
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get an upload session by session token
      tags:
      - UploadSession
  /api/v1/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        example: 1234567890abcdef12345678
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get user by ID
      tags:
      - User
  /api/v1/user/email/{email}:
    get:
      consumes:
      - application/json
      description: Get user by email
      parameters:
      - description: User email
        example: email@example.com
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get user by email
      tags:
      - User
  /api/v1/user/emails:
    post:
      consumes:
      - application/json
      description: Get users by emails
      parameters:
      - description: User emails
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserEmailListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get users by emails
      tags:
      - User
  /api/v1/user/ids:
    post:
      consumes:
      - application/json
      description: Get users by IDs
      parameters:
      - description: User IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserIDListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get users by IDs
      tags:
      - User
  /api/v1/user/info:
    get:
      consumes:
      - application/json
      description: Returns the user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            type: string
      security:
      - Bearer: []
      - ApiKeyAuth: []
      summary: Returns the user information
      tags:
      - User
  /download/{fileId}:
    get:
      consumes:
      - application/json
      description: Download a file by its ID. The file ID is a unique identifier for
        the file in the database. The file is downloaded in chunks to optimize performance
        and reduce memory usage.
      parameters:
      - description: File ID
        example: 1234567890abcdef12345678
        in: path
        name: fileId
        required: true
        type: string
      - description: Token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaWxlTmFtZSI6InRlc3QuanBnIiwib3duZXJJZCI6IjEyMzQ1Njc4OWFiY2RlZiIsImZpbGVTaXplIjoxMjM0NTY3ODkwLCJ0b3RhbENodW5rcyI6MTIzNDU2Nzg5MCwibWltZVR5cGUiOiJpbWFnZS9qcGcifQ.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaWxlTmFtZSI6InRlc3QuanBnIiwib3duZXJJZCI6IjEyMzQ1Njc4OWFiY2RlZiIsImZpbGVTaXplIjoxMjM0NTY3ODkwLCJ0b3RhbENodW5rcyI6MTIzNDU2Nzg5MCwibWltZVR5cGUiOiJpbWFnZS9qcGcifQ
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File downloaded successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: File not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Download a file
      tags:
      - Files
  /hello:
    get:
      consumes:
      - application/json
      description: Returns a hello world message
      produces:
      - application/json
      responses:
        "200":
          description: Hello World
          schema:
            type: string
      summary: Returns a hello world message
      tags:
      - Misc
  /search:
    get:
      consumes:
      - application/json
      description: Search for files and folders by query
      parameters:
      - description: Owner ID
        in: query
        name: ownerId
        required: true
        type: string
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.SearchResult'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Search files and folders
      tags:
      - Search
  /upload/{sessionToken}:
    put:
      consumes:
      - application/json
      description: Add a chunk to an existing upload session using its session token.
      parameters:
      - description: Session Token
        in: path
        name: sessionToken
        required: true
        type: string
      - description: Chunk data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddChunkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Chunk added successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Invalid request body or session token'
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a chunk to an upload session
      tags:
      - UploadSession
  /upload/chunked/{fileId}:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file in chunks (auto chunking) to the server. This endpoint
        automatically splits the file into chunks and uploads them concurrently. It
        is useful for larger files or when chunking is needed, i.e., larger than 50MB.
      parameters:
      - default: '"fileId"'
        description: File ID
        example: '"fileId"'
        in: path
        name: fileId
        required: true
        type: string
      - default: 5242880
        description: Chunk Size
        example: 5242880
        in: query
        name: chunkSize
        type: integer
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Invalid file ID or file size exceeds the maximum
            limit'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to save file'
          schema:
            type: string
      summary: Upload a file in chunks (auto chunking)
      tags:
      - Upload
  /upload/file/{fileID}:
    get:
      consumes:
      - application/json
      description: Retrieve an upload session's metadata using its associated file
        ID.
      parameters:
      - description: File ID
        in: path
        name: fileID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session retrieved successfully
          schema:
            $ref: '#/definitions/models.UploadSession'
        "400":
          description: 'Bad Request: Missing or invalid file ID'
          schema:
            type: string
        "404":
          description: 'Not Found: Session not found'
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get an upload session by file ID
      tags:
      - UploadSession
    put:
      consumes:
      - application/json
      description: Add a chunk to an existing upload session using its associated
        file ID.
      parameters:
      - description: File ID
        in: path
        name: fileID
        required: true
        type: string
      - description: Chunk data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddChunkViaFileIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Chunk added successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Invalid request body or file ID'
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a chunk to an upload session using file ID
      tags:
      - UploadSession
  /upload/session/{sessionToken}/chunk:
    post:
      consumes:
      - application/json
      description: Upload a chunk to a resumable session using the session token and
        Content-Range header to identify the chunk and its size. The chunk is saved
        to the server or any other storage.
      parameters:
      - description: Session Token
        in: path
        name: sessionToken
        required: true
        type: string
      - description: Content-Range header specifying the chunk range
        in: header
        name: Content-Range
        required: true
        type: string
      - description: Chunk data
        in: body
        name: body
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Chunk uploaded successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Invalid session ID or Content-Range header'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to save chunk'
          schema:
            type: string
      summary: Upload a chunk to a resumable session
      tags:
      - Upload
  /upload/session/{sessionToken}/status:
    get:
      consumes:
      - application/json
      description: Retrieve the status of an upload session using its session token.
      parameters:
      - description: Session Token
        in: path
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session retrieved successfully
          schema:
            $ref: '#/definitions/models.UploadSession'
        "400":
          description: 'Bad Request: Missing session ID'
          schema:
            type: string
        "403":
          description: 'Forbidden: User ID does not match the session owner'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to fetch session object'
          schema:
            type: string
      summary: Get the status of an upload session
      tags:
      - Upload
  /upload/user/{userID}:
    get:
      consumes:
      - application/json
      description: Retrieve all upload sessions associated with a user ID.
      parameters:
      - description: User ID (me for current user)
        in: path
        name: userID
        required: true
        type: string
      - description: Status of the upload session (optional)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: 'Bad Request: Missing or invalid user ID'
          schema:
            type: string
        "404":
          description: 'Not Found: No sessions found for the user ID'
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all upload sessions by user ID
      tags:
      - UploadSession
  /upload/whole/{fileId}:
    post:
      consumes:
      - multipart/form-data
      description: Upload a whole file (without chunking) to the server. This is a
        simple upload endpoint that does not require chunking. It is useful for smaller
        files or when chunking is not needed, i.e., lower than 50MB.
      parameters:
      - default: '"fileId"'
        description: File ID
        example: '"fileId"'
        in: path
        name: fileId
        required: true
        type: string
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Invalid file ID or Failed to get file from form
            or file size exceeds the maximum limit'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to save file'
          schema:
            type: string
      summary: Upload a whole file (without chunking)
      tags:
      - Upload
securityDefinitions:
  Bearer:
    description: Use "Bearer {your_token}" to authenticate requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
