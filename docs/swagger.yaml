definitions:
  models.CreateFolderRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.CreateFolderResponse:
    properties:
      id:
        type: string
      name:
        type: string
      owner_id:
        type: string
      parent_id:
        type: string
    type: object
  models.File:
    properties:
      deleted_at:
        description: Nullable field for soft delete
        type: string
      extension:
        type: string
      file_name:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      mime_type:
        type: string
      owner_id:
        description: The owner of the file
        type: string
      parent_folder_id:
        description: The parent folder ID, if any
        type: string
      size:
        type: integer
      total_chunks:
        description: ChunkList   []Chunk `bson:"chunk_list" json:"chunk_list"`
        type: integer
    type: object
  models.Folder:
    properties:
      created_at:
        type: string
      deleted_at:
        description: Nullable field for soft delete
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_root:
        description: Indicates if this is a root folder
        type: boolean
      name:
        type: string
      owner_id:
        description: The owner of the folder
        type: string
      parent_folder_id:
        description: The parent folder ID, if any
        type: string
      stats:
        $ref: '#/definitions/models.FolderStat'
      updated_at:
        type: string
    type: object
  models.FolderStat:
    properties:
      total_files:
        type: integer
      total_folders:
        type: integer
      total_size:
        type: integer
    type: object
  models.GetFolderContentsResponse:
    properties:
      file_list:
        items:
          $ref: '#/definitions/models.File'
        type: array
      folder_list:
        items:
          $ref: '#/definitions/models.Folder'
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      access_token:
        description: Access token
        type: string
      email:
        description: User email
        type: string
      id:
        description: User ID
        type: string
      refresh_token:
        description: Refresh token
        type: string
      root_folder_id:
        description: Root folder ID
        type: string
      username:
        description: Username
        type: string
    type: object
  models.MoveFolderRequest:
    properties:
      new_parent_id:
        type: string
    required:
    - new_parent_id
    type: object
  models.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RefreshResponse:
    properties:
      access_token:
        description: Access token
        type: string
      email:
        description: User email
        type: string
      id:
        description: User ID
        type: string
      refresh_token:
        description: Refresh token
        type: string
      username:
        description: Username
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.RenameFolderRequest:
    properties:
      new_name:
        type: string
    required:
    - new_name
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      last_password_change_at:
        type: string
      root_folder_id:
        description: The root folder ID for the user
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint authenticates the user by checking the email and
        password. If the credentials are valid, it generates an access token and a
        refresh token.
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User authenticated successfully
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Authenticates the user
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user and invalidates the refresh token
      produces:
      - application/json
      responses:
        "200":
          description: User logged out successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to log out the user
          schema:
            type: string
      summary: Logs out the user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: This endpoint validates the refresh token and generates a new access
        token, allowing the user to continue their session without re-authenticating.
      parameters:
      - description: Refresh Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            $ref: '#/definitions/models.RefreshResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid refresh token
          schema:
            type: string
        "500":
          description: Failed to refresh the access token
          schema:
            type: string
      summary: Validate and refresh the access token via refresh token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new user by creating a new user record
        in the database.
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "409":
          description: User already exists with the email
          schema:
            type: string
        "500":
          description: Failed to register the user
          schema:
            type: string
      summary: Registers a new user
      tags:
      - Authentication
  /folders/{folderId}:
    delete:
      consumes:
      - application/json
      description: Delete a folder by its ID. This will not delete the folder physically,
        but mark it as deleted in the database.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder deleted successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      summary: Delete a folder of a given folderId
      tags:
      - Folders
    get:
      consumes:
      - application/json
      description: Retrieve a folder metadata gievn its ID. It will return the folder
        metadata like the folder ID, owner ID, and other metadata.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Folder'
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      summary: Get a folder metadata given its ID
      tags:
      - Folders
  /folders/{folderId}/contents:
    get:
      consumes:
      - application/json
      description: Retrieve all folders and files inside the specified parent folder.
        Return two separate list of folders and files.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetFolderContentsResponse'
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      summary: Get contents of a folder (folders and files)
      tags:
      - Folders
  /folders/{folderId}/create:
    post:
      consumes:
      - application/json
      description: Create a new folder in the specified parent folder
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Create Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateFolderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateFolderResponse'
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      summary: Create a new folder in prompted folder id
      tags:
      - Folders
  /folders/{folderId}/move:
    put:
      consumes:
      - application/json
      description: Move the current folder (:folderId) to the new parent folder which
        is new_parent_id in the request body.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Move Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MoveFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder moved successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      summary: Move a folder of given folderId to a new parent folder
      tags:
      - Folders
  /folders/{folderId}/rename:
    patch:
      consumes:
      - application/json
      description: Rename a folder of a given ID to new name.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Rename Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RenameFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder renamed successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      summary: Rename a folder of a given ID
      tags:
      - Folders
    put:
      consumes:
      - application/json
      description: Rename a folder of a given ID to new name.
      parameters:
      - description: Folder ID
        in: path
        maxLength: 24
        minLength: 24
        name: folderId
        required: true
        type: string
      - description: Rename Folder Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RenameFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder renamed successfully.
          schema:
            type: string
        "400":
          description: Invalid request.
          schema:
            type: string
        "404":
          description: Folder not found.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      summary: Rename a folder of a given ID
      tags:
      - Folders
  /hello:
    get:
      consumes:
      - application/json
      description: Returns a hello world message
      produces:
      - application/json
      responses:
        "200":
          description: Hello World
          schema:
            type: string
      summary: Returns a hello world message
      tags:
      - Misc
  /user:
    get:
      consumes:
      - application/json
      description: Returns the user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Returns the user information
      tags:
      - User
swagger: "2.0"
