{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/login": {
            "post": {
                "description": "This endpoint authenticates the user by checking the email and password. If the credentials are valid, it generates an access token and a refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticates the user",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logs out the user and invalidates the refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logs out the user",
                "responses": {
                    "200": {
                        "description": "User logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to log out the user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "This endpoint validates the refresh token and generates a new access token, allowing the user to continue their session without re-authenticating.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Validate and refresh the access token via refresh token",
                "parameters": [
                    {
                        "description": "Refresh Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to refresh the access token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "This endpoint registers a new user by creating a new user record in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Registers a new user",
                "parameters": [
                    {
                        "description": "Register Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already exists with the email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to register the user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/files/{fileId}": {
            "get": {
                "description": "Get file metadata by file ID. The file ID is a unique identifier for the file in the database. The metadata includes information such as the file name, size, type, and creation date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Get file metadata",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File metadata retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.File"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a file by its ID. The file is marked as deleted in the database, but not removed from the storage service. This allows for potential recovery in the future.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Delete a file",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/files/{fileId}/move": {
            "put": {
                "description": "Move a file to a new folder by providing the new parent folder ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Move a file to a new folder",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Move file request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MoveFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File moved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/files/{fileId}/rename": {
            "put": {
                "description": "Rename a file by providing the new name. Upon renaming, the file's metadata is updated. And when downloading, the file is fetched from the storage service using the new name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Rename a file",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename file request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File renamed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Rename a file by providing the new name. Upon renaming, the file's metadata is updated. And when downloading, the file is fetched from the storage service using the new name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Rename a file",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1234567890abcdef12345678",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename file request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File renamed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/folders/{folderId}": {
            "get": {
                "description": "Retrieve detailed metadata for a folder by its ID. Includes information such as folder ID, owner ID, name, parent folder ID, and creation timestamps.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Get metadata of a specific folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Folder"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Mark a folder as deleted (move it to the recycle bin). Subfolders and files are not immediately deleted but will also be marked for deletion. After a retention period, they may be permanently deleted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Soft-delete a folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder deleted successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/folders/{folderId}/contents": {
            "get": {
                "description": "Retrieve a list of all files and subfolders contained within a specified folder. Useful for browsing the contents of a directory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "List all files and folders inside a folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GetFolderContentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/folders/{folderId}/create": {
            "post": {
                "description": "Create a new folder inside a given parent folder. If no parent folder ID is provided, the folder will be created at the root level.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Create a new folder inside a specified parent folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateFolderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/folders/{folderId}/move": {
            "put": {
                "description": "Move a folder from its current location to another destination folder. The folder's contents will be moved along with it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Move a folder to a new parent folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Move Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MoveFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder moved successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/folders/{folderId}/rename": {
            "put": {
                "description": "Rename an existing folder by providing its ID and the new name. Only the folder name will be updated; the folder's contents are unaffected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Rename a specific folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder renamed successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Rename an existing folder by providing its ID and the new name. Only the folder name will be updated; the folder's contents are unaffected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Folders"
                ],
                "summary": "Rename a specific folder",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rename Folder Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RenameFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder renamed successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/folders/{folderId}/upload": {
            "post": {
                "description": "Create a file document in the database for file upload operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Upload metadata and create a file metadata in the database before upload operation.",
                "parameters": [
                    {
                        "maxLength": 24,
                        "minLength": 24,
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Upload File Metadata Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UploadFileMetadataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UploadFileMetadataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Folder not found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/hello": {
            "get": {
                "description": "Returns a hello world message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns a hello world message",
                "responses": {
                    "200": {
                        "description": "Hello World",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Returns the user information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateFolderRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.CreateFolderResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                }
            }
        },
        "models.File": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "Nullable field for soft delete",
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "file_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "mime_type": {
                    "type": "string"
                },
                "owner_id": {
                    "description": "The owner of the file",
                    "type": "string"
                },
                "parent_folder_id": {
                    "description": "The parent folder ID, if any",
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "total_chunks": {
                    "description": "ChunkList   []Chunk `bson:\"chunk_list\" json:\"chunk_list\"`",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.FileResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Folder": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "Nullable field for soft delete",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "is_root": {
                    "description": "Indicates if this is a root folder",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "description": "The owner of the folder",
                    "type": "string"
                },
                "parent_folder_id": {
                    "description": "The parent folder ID, if any",
                    "type": "string"
                },
                "stats": {
                    "$ref": "#/definitions/models.FolderStat"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.FolderStat": {
            "type": "object",
            "properties": {
                "total_files": {
                    "type": "integer"
                },
                "total_folders": {
                    "type": "integer"
                },
                "total_size": {
                    "type": "integer"
                }
            }
        },
        "models.GetFolderContentsResponse": {
            "type": "object",
            "properties": {
                "file_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.File"
                    }
                },
                "folder_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Folder"
                    }
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Access token",
                    "type": "string"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "id": {
                    "description": "User ID",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Refresh token",
                    "type": "string"
                },
                "root_folder_id": {
                    "description": "Root folder ID",
                    "type": "string"
                },
                "username": {
                    "description": "Username",
                    "type": "string"
                }
            }
        },
        "models.MoveFileRequest": {
            "type": "object",
            "required": [
                "new_parent_id"
            ],
            "properties": {
                "new_parent_id": {
                    "type": "string"
                }
            }
        },
        "models.MoveFolderRequest": {
            "type": "object",
            "required": [
                "new_parent_id"
            ],
            "properties": {
                "new_parent_id": {
                    "type": "string"
                }
            }
        },
        "models.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.RefreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Access token",
                    "type": "string"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "id": {
                    "description": "User ID",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Refresh token",
                    "type": "string"
                },
                "username": {
                    "description": "Username",
                    "type": "string"
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "models.RenameFileRequest": {
            "type": "object",
            "required": [
                "new_name"
            ],
            "properties": {
                "new_name": {
                    "type": "string"
                }
            }
        },
        "models.RenameFolderRequest": {
            "type": "object",
            "required": [
                "new_name"
            ],
            "properties": {
                "new_name": {
                    "type": "string"
                }
            }
        },
        "models.UploadFileMetadataRequest": {
            "type": "object",
            "required": [
                "file_name",
                "file_size"
            ],
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "mime_type": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "models.UploadFileMetadataResponse": {
            "type": "object",
            "required": [
                "upload_url"
            ],
            "properties": {
                "file": {
                    "$ref": "#/definitions/models.FileResponse"
                },
                "upload_url": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_login_at": {
                    "type": "string"
                },
                "last_password_change_at": {
                    "type": "string"
                },
                "root_folder_id": {
                    "description": "The root folder ID for the user",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}